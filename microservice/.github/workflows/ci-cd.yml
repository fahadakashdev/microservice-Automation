name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: ${{ secrets.GCP_REGION }}
  REGISTRY: gcr.io

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      user-service: ${{ steps.changes.outputs.user-service }}
      order-service: ${{ steps.changes.outputs.order-service }}
      notification-service: ${{ steps.changes.outputs.notification-service }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            user-service:
              - 'services/user-service/**'
            order-service:
              - 'services/order-service/**'
            notification-service:
              - 'services/notification-service/**'

  test:
    runs-on: ubuntu-latest
    needs: detect-changes
    strategy:
      matrix:
        service: [user-service, order-service, notification-service]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        if: needs.detect-changes.outputs[matrix.service] == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: services/${{ matrix.service }}/package-lock.json

      - name: Install dependencies
        if: needs.detect-changes.outputs[matrix.service] == 'true'
        run: |
          cd services/${{ matrix.service }}
          npm ci

      - name: Run tests
        if: needs.detect-changes.outputs[matrix.service] == 'true'
        run: |
          cd services/${{ matrix.service }}
          npm test

      - name: Run linting
        if: needs.detect-changes.outputs[matrix.service] == 'true'
        run: |
          cd services/${{ matrix.service }}
          npm run lint

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [detect-changes, test]
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [user-service, order-service, notification-service]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Google Cloud CLI
        if: needs.detect-changes.outputs[matrix.service] == 'true'
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker to use gcloud as credential helper
        if: needs.detect-changes.outputs[matrix.service] == 'true'
        run: gcloud auth configure-docker

      - name: Build Docker image
        if: needs.detect-changes.outputs[matrix.service] == 'true'
        run: |
          cd services/${{ matrix.service }}
          docker build -t $REGISTRY/$PROJECT_ID/${{ matrix.service }}:$GITHUB_SHA .
          docker tag $REGISTRY/$PROJECT_ID/${{ matrix.service }}:$GITHUB_SHA $REGISTRY/$PROJECT_ID/${{ matrix.service }}:latest

      - name: Push Docker image
        if: needs.detect-changes.outputs[matrix.service] == 'true'
        run: |
          docker push $REGISTRY/$PROJECT_ID/${{ matrix.service }}:$GITHUB_SHA
          docker push $REGISTRY/$PROJECT_ID/${{ matrix.service }}:latest

      - name: Deploy to Cloud Run
        if: needs.detect-changes.outputs[matrix.service] == 'true'
        run: |
          gcloud run deploy ${{ matrix.service }} \
            --image $REGISTRY/$PROJECT_ID/${{ matrix.service }}:$GITHUB_SHA \
            --platform managed \
            --region $GCP_REGION \
            --allow-unauthenticated \
            --port 3000 \
            --memory 512Mi \
            --cpu 1 \
            --min-instances 0 \
            --max-instances 10 \
            --set-env-vars NODE_ENV=production

  deploy-to-gke:
    runs-on: ubuntu-latest
    needs: [detect-changes, test]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials microservice-cluster \
            --zone $GCP_REGION \
            --project $PROJECT_ID

      - name: Deploy to GKE
        run: |
          # Update image tags in Kubernetes manifests
          sed -i "s|IMAGE_TAG|$GITHUB_SHA|g" k8s/*.yaml
          sed -i "s|PROJECT_ID|$PROJECT_ID|g" k8s/*.yaml
          
          # Apply manifests
          kubectl apply -f k8s/
          
          # Wait for rollout
          kubectl rollout status deployment/user-service
          kubectl rollout status deployment/order-service
          kubectl rollout status deployment/notification-service